# File: domain/order/schemas.py
from pydantic import BaseModel, EmailStr, ConfigDict # Import ConfigDict for V2
from datetime import datetime

# --- Base Schemas (Common fields) ---

class DeliveryInfoBase(BaseModel):
    first_name: str
    last_name: str
    email: EmailStr
    phone: str
    street: str
    city: str
    state: str
    zip_code: str # Ensure backend model also uses snake_case ('zip_code')
    country: str

# --- Schemas for Creating Data ---

class DeliveryInfoCreate(DeliveryInfoBase):
    # Inherits all fields from DeliveryInfoBase
    # No extra fields needed for creation based on current logic
    pass

class OrderCreate(BaseModel):
    delivery_info: DeliveryInfoCreate # Nested delivery info for creation
    subtotal: float                 # Expecting calculated totals from frontend
    shipping_fee: float
    total: float
    # payment_method is likely determined server-side (defaulted in model/repo)

# --- Schemas for Responding to Client ---

class DeliveryInfoResponse(DeliveryInfoBase):
    id: int               # Include ID generated by DB
    created_at: datetime  # Include timestamp generated by DB

    # Pydantic V2 configuration to allow creating from ORM objects
    model_config = ConfigDict(from_attributes=True)


class OrderResponse(BaseModel):
    id: int               # Include ID generated by DB
    delivery_info_id: int # Foreign key reference
    subtotal: float
    shipping_fee: float
    total: float
    payment_method: str   # Include the method used (e.g., 'cash_on_delivery')
    created_at: datetime  # Include timestamp generated by DB

    # Pydantic V2 configuration to allow creating from ORM objects
    model_config = ConfigDict(from_attributes=True)