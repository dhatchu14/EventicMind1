
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: eventicmind_db
    ports:
      - "5433:5432" 
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend FastAPI Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:root@postgres:5432/eventicmind_db
      - JWT_SECRET_KEY=ePJVSkFfl2lyn7hZtfLSmUbI1Lj4kxqUiwdlUw-UwCM
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:8080
      - OLLAMA_MODEL=mistral
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    networks:
      - app-network
    volumes:
      - ./backend:/app

  # Frontend Vite/React Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce-frontend
    restart: always
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    ports:
      - "5173:5173"
    networks:
      - app-network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

 # ZooKeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka - Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - app-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list || exit 1
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka UI - Web interface for managing Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ecommerce-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - app-network

  # Debezium Connect - For Change Data Capture
  debezium:
    image: debezium/connect:2.4
    container_name: ecommerce-debezium
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
      BOOTSTRAP_SERVERS: kafka:9092
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: